def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
def packer = rootProject.ext.android

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 27

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.jiangxq.filmdev"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode packer.versionCode
        versionName packer.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        releaseConfig {
            storeFile file("./Jiangxq")
            storePassword project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : System.getenv("KEYSTORE_PASS")
            keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME")
            keyPassword project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : System.getenv("ALIAS_PASS")
        }
        debug{
            storeFile file("./Jiangxq")
            storePassword project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : System.getenv("KEYSTORE_PASS")
            keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME")
            keyPassword project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : System.getenv("ALIAS_PASS")
        }
    }

    buildTypes {
        release {
            buildConfigField("boolean", "API_ENV", "true")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            buildConfigField("boolean", "API_ENV", "false")
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.6'
    implementation 'com.android.support:support-v4:27.1.1'
}

task flutterPlugin << {
    println "工程目录 = ${project.rootDir}/"
    println "编译成功的位置 = ${this.buildDir}/"

    def projectName = this.buildDir.getPath()
    projectName = projectName.substring(0, projectName.length() - "app/".length())

    def rDir = new File("${this.rootDir}/FlutterPlugin/")
    def bDir = new File(projectName)

    if (!rDir.exists()) {
        rDir.mkdirs()
    } else {
        rDir.deleteDir()
    } 

    bDir.eachDir {File dir ->
        def subDir = dir.getPath()
        def flutterJarDirName = subDir.replace("${projectName}/", "")
        def flutterJarDir = null
        if (subDir.contains("app")) {// 如果是app目录的话 拷贝编译后生成的flutter目录
            flutterJarDir = new File("${subDir}/intermediates/assets/")
        } else {
            flutterJarDir = new File("${subDir}/intermediates/intermediate-jars/")
        }
        project.copy {
            from flutterJarDir
            into "${rDir}/${flutterJarDirName}"
        }
    }
}
